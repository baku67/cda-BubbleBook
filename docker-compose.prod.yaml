# Pour mise en prod sur serveur éclaté EC2 AWS gratuit, on build pas angular sur place.
# On fait le build sur la machine local (puissante) et on point apache dessus directement (au lieu du dossier frontend entier)
# Nécessite de faire un build pour chaque MEP (ou go faire ça en CI/CD)

# Pour lancer ce fichier de config:
# "docker-compose -f docker-compose.prod.yaml up --build"

services:

  # Proxy pour servir l'API et l'app Angular sur le meme domaine pour pouvoir mettre en place le https (certificats SSL) pour le SetCookie RefreshToken oyé
  reverse-proxy:
    image: traefik:v2.10
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/certs:/certs # sans :ro (car il doit etre accessible en lecture ET écriture pour les certifs)
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - mynetwork
    labels:
      - "traefik.enable=true"

  # apache:
  #  image: httpd:latest 
  #  ports:
  #    - "8080:80" 
  #  volumes:
  #    - ./frontend/dist/angular:/var/www/html # bind mount opti (plus sur le ./frontend)
  #  networks:
  #    - mynetwork


  php:
    build:
      context: ./backend 
      dockerfile: Dockerfile 
    container_name: php-symfony
    environment:
      APACHE_DOCUMENT_ROOT: /var/www/html/public
    #ports:
    #  - "8000:443"
    expose:
      - "80"
    volumes:
      - ./backend:/var/www/html:delegated 
      - vendor:/var/www/html/vendor 
      - var:/var/www/html/var 
      - php-certs:/etc/ssl:rw 
    networks:
      - mynetwork
    depends_on:
      - postgres
      - mailer
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`15.237.249.201`) && PathPrefix(`/api`)" # CHANGER L'ip EC2-AWS ou nom de domaine
      #- "traefik.http.routers.api.rule=Host(`15.237.249.201`)" # CHANGER L'ip EC2-AWS ou nom de domaine
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.services.api.loadbalancer.server.port=80"




  postgres:
    image: postgres:15 
    environment:
      POSTGRES_DB: bubblebook
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432" 
    volumes:
      - pg_data:/var/lib/postgresql/data 
    networks:
      - mynetwork


  pgadmin:
    image: dpage/pgadmin4 
    environment:
      PGADMIN_DEFAULT_EMAIL: postgres@postgres.com
      PGADMIN_DEFAULT_PASSWORD: postgres
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - mynetwork
    volumes:
      - pgadmin_data:/var/lib/pgadmin 


  mailer:
    image: axllent/mailpit 
    ports:
      - "1025:1025" 
      - "8025:8025"  
    networks:
      - mynetwork
    environment:
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1


  #angular:
  #  build:
  #    context: ./frontend
  #    dockerfile: Dockerfile # image custom
  #  container_name: angular
  #  working_dir: /app
  #  volumes:
  #    # synchronisation entre volume:conteneur
  #    - ./frontend:/app:delegated # "./" => bind mounts (liaison de dossier), utile pour éviter de rebuild et remonter les container a chaque changement dans le code source du projet
  #    - node_modules:/app/node_modules # volume nommé
  #    # Monte les certificats SSL (pour Https pour SetCookie REfreshToken Secure) générés par le Dockerfile backend
  #    - php-certs:/app/certs:ro # Volume partagé pour les certificats
  #  ports:
  #    - "4200:4200" # "machineHôte:DockerEngine"
  #  networks:
  #    - mynetwork
  #  labels:
  #    - "traefik.http.routers.frontend.rule=Host(`frontend.example.com`)"
  #    - "traefik.http.routers.frontend.entrypoints=websecure"
  #    - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
  angular:
    image: nujabb/front-opti:latest
    expose:
      - "80" # et non plus "ports" 80:80
    networks:
      - mynetwork
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.frontend.rule=Host(`15.237.249.201`)" # CHANGER L'ip EC2-AWS ou nom de domaine
    - "traefik.http.routers.frontend.entrypoints=web"
    - "traefik.http.routers.frontend.entrypoints=websecure"
    - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
    - "traefik.http.services.frontend.loadbalancer.server.port=80"


volumes:
  pg_data:
  pgadmin_data:
  node_modules: 
  vendor:  
  var:  
  php-certs:

networks:
  mynetwork:

