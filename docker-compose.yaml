

services:

  apache:
    image: httpd:latest
    ports:
      - "8080:80"
    volumes:
      - ./frontend:/var/www/html
    networks:
      - mynetwork


  php:
    build:
      context: ./backend  # chemin du Dockerfile
    container_name: php-symfony
    environment:
      APACHE_DOCUMENT_ROOT: /var/www/html/public
      # MAILER_DSN: smtp://mailer:1025 # osef vu que dans .env copié ?
    ports:
      - "8000:80"
    volumes:
      - ./backend:/var/www/html
      - vendor:/var/www/html/vendor  # Préserve le dossier vendor
      - var:/var/www/html/var
      # - ./backend/var:/var/www/html/var
      # - ./backend/composer.json:/var/www/html/composer.json
      # - ./backend/composer.lock:/var/www/html/composer.lock
    networks:
      - mynetwork
    depends_on:
      - postgres
      - mailer
    # command: ["apache2-foreground"]  # plus besoin car géré par le Dockerfile/docker_entrypoint.sh




  postgres:
    image: postgres:15  # Utilisez une version spécifique de PostgreSQL (plutot que "latest")
    environment:
      POSTGRES_DB: bubblebook
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - mynetwork


  pgadmin:
    image: dpage/pgadmin4
    # privileged: true
    environment:
      PGADMIN_DEFAULT_EMAIL: postgres@postgres.com
      PGADMIN_DEFAULT_PASSWORD: postgres
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - mynetwork
    volumes:
      - pgadmin_data:/var/lib/pgadmin  # Persiste les données de session et la configuration


  ###> symfony/mailer ###
  mailer:
    image: axllent/mailpit
    ports:
      - "1025:1025"
      - "8025:8025"  # Interface web de Mailpit
    networks:
      - mynetwork
    environment:
      MP_SMTP_AUTH_ACCEPT_ANY: 1
      MP_SMTP_AUTH_ALLOW_INSECURE: 1
    ###< symfony/mailer ###


  angular:
    build:
      context: ./frontend  # Répertoire contenant ton Dockerfile
      dockerfile: Dockerfile  # Nom du Dockerfile 
    container_name: angular
    working_dir: /app
    volumes:
      - ./frontend:/app  # Monte le code source
      - node_modules:/app/node_modules # Préserve le dossier node_modules du conteneur
      # Le volume node_modules monte le répertoire /app/node_modules du conteneur dans un volume Docker nommé node_modules, évitant ainsi qu'il soit écrasé par le montage de votre répertoire local ./frontend.
      # Cela permet de conserver les modules Node.js installés lors du build de l'image Docker, y compris @angular/cli.
      # Même si normalement node_module .dockerignoré
    ports:
      - "4200:4200"
    networks:
      - mynetwork

volumes:
  pg_data:
  pgadmin_data:
  node_modules:  # Ajout du volume nommé node_modules
  vendor:  # Ajout du volume nommé vendor
  var:


networks:
  mynetwork: