import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

interface DecodedToken {
  exp?: number;  // Le champ exp représente la date d'expiration en secondes depuis Epoch
}


@Injectable({
  providedIn: 'root'
})
export class AuthService {

  private loggedIn = new BehaviorSubject<boolean>(this.hasToken());
  // Observable pour savoir si l'utilisateur est connecté
  isLoggedIn$ = this.loggedIn.asObservable();


  // Simule la récupération du JWT depuis le localStorage ou autre moyen de stockage
  getToken(): string | null {
    return sessionStorage.getItem('jwtToken');  // Récupère le token JWT du localStorage (ou de ton propre mécanisme)
  }

   // Vérifie si un utilisateur est connecté
  private hasToken(): boolean {
    return !!this.getToken();
  }

  // Déconnexion de l'utilisateur
  logout(): void {
    sessionStorage.removeItem('jwtToken');  // Supprime le token stocké dans le localStorage
  }

}



ngOnInit() {
  // S'abonner à l'observable pour suivre l'état de connexion
  this.authService.isLoggedIn$.subscribe(isLoggedIn => {
    this.isLoggedIn = isLoggedIn;
  });
}