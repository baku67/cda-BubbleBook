name: Testing + build Image Angular on DockerHub + Deploy to EC2

on:
  push:
    branches:
      - main

jobs:

  # ### CI int√©gr√© √† la pipeline de d√©ploiement

  # CI Angular
  angular-tests:
    name: ‚úÖ Angular Tests
    runs-on: ubuntu-latest  
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # V√©rifie le code du d√©p√¥t dans l'environnement de build

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'  

      - name: Install dependencies
        run: npm install  
        working-directory: ./frontend

      - name: Run Linter (non bloquant)
        continue-on-error: true
        run: npm run lint  
        working-directory: ./frontend

      - name: Run Unit Tests
        continue-on-error: true # TEMPORAIRE
        run: npm run test -- --watch=false --browsers=ChromeHeadless  # Ex√©cute les tests unitaires avec Karma en mode t√™te sans navigateur visible
        working-directory: ./frontend

      - name: Build the application
        run: npm run build -- --configuration production # Compile l'application Angular en mode production
        working-directory: ./frontend

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: ./frontend/dist/  # Archive les fichiers de production de l'application pour consultation ult√©rieure


  # CI Symfony
  symfony-tests:
    name: ‚úÖ Symfony Tests
    runs-on: ubuntu-latest  
    defaults:
      run:
        working-directory: ./backend
    services:
      postgres:
        image: postgres:15  
        env:
          POSTGRES_DB: bubblebook  
          POSTGRES_USER: postgres  
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2  
          extensions: mbstring, pdo, pdo_pgsql, intl, xml, zip  
          ini-values: post_max_size=256M, upload_max_filesize=256M

      - name: Create .env file for CI
        run: cp .env.test .env
        working-directory: ./backend

      - name: Install dependencies
        run: composer install --no-progress --no-suggest --prefer-dist --no-interaction
        working-directory: ./backend

      - name: Ensure Doctrine ORM is installed
        run: composer require symfony/orm-pack --no-progress
        working-directory: ./backend

      - name: Run PHPStan
        continue-on-error: true
        run: composer phpstan
        working-directory: ./backend

      - name: Run PHP CodeSniffer
        # run: composer lint
        continue-on-error: true
        run: |
          phpcs --standard=PSR12 --report=summary src/ || true
        working-directory: ./backend

      - name: Prepare database
        env:
          KERNEL_CLASS: App\Kernel
          #DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/bubblebook" # D√©j√† pr√©cis√© dans le .env.test copi√© en .env plus haut
        run: |
          php bin/console doctrine:database:create --if-not-exists
          php bin/console doctrine:schema:update --force
          php bin/console doctrine:fixtures:load --no-interaction
        working-directory: ./backend

      - name: Run tests
        env:
          DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/bubblebook"
        run: vendor/bin/phpunit
        working-directory: ./backend



  # Push de l'image du build optimis√© de l'app Angular
  build-and-push:
    name: üõ† Build Angular Docker Image
    runs-on: ubuntu-latest
    needs: [angular-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} # secret ajout√©
          password: ${{ secrets.DOCKERHUB_PASSWORD }} # secret (mdp pas token !)

      # On r√©cup√®re le build du runner de test o√π on build d√©j√† l'app
      - name: Download production build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: ./frontend/dist/  # T√©l√©charge les artefacts de build de production de l'application Angular

      # V√©rif logs in-game
      - name: üîç Debug check build contents
        run: ls -R ./frontend/dist

      - name: Build and push Angular image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: true
          tags: nujabb/front-opti:latest
          build-args: |
            BUILD_DIR=dist/angular/browser 

 
  # ### CD
  deploy:
    name: üöÄ Deploy to EC2
    runs-on: ubuntu-latest
    needs: [angular-tests, symfony-tests, build-and-push]
    if: ${{ success() }}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Connect to EC2 via SSH and pull latest code
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.EC2_DEPLOY_SSH_KEY }}
        # pas de --build dans le docker-compose ? :
        script: |
          echo "Pulling latest code..."
          cd /home/ec2-user/cda-BubbleBook
          git pull origin main

          echo "Relaunching Docker Compose..."
          docker-compose -f docker-compose.prod.yaml up -d --pull always

          docker system prune -af --volumes 
          echo "Deployment finished."