security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email


    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # Gestion de la route de login avec json_login
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login
                username_path: email
                password_path: password
                success_handler: App\Security\LoginSuccessHandler  # Utilise le handler personnalisé ici
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # Route pour l'enregistrement d'un nouvel utilisateur (pas besoin de sécurité)
        register:
            pattern: ^/api/register
            stateless: true
            security: false

        api:
            # pattern: ^/api/
            pattern: ^/api/(?!check-email-exist)  # Exclure /api/check-email-exist du firewall JWT
            stateless: true
            jwt: ~  # Utilisation de JWT pour l'authentification
            provider: app_user_provider


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Autoriser l'accès à la route de login et de register sans authentification
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }

        # Exclusion de la route /api/check-email-exist
        - { path: ^/api/check-email-exist, roles: IS_AUTHENTICATED_ANONYMOUSLY }

        # Toutes les autres routes API doivent être sécurisées par JWT
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
