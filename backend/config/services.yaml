# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true
        autoconfigure: true
        
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # Le JWTCreatedListener est un listener d'événement associé à lexik_jwt_authentication.on_jwt_created. Ce listener est déclenché lors de la création du token JWT, juste après l'authentification réussie, mais avant que le token ne soit signé.
    # Modifier le contenu du payload JWT avant qu’il ne soit signé ou Ajouter des données supplémentaires au JWT, comme des informations sur l’utilisateur ou d’autres métadonnées.
    App\EventListeners\JWTCreatedListener:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    # Le LoginSuccessHandler est un handler personnalisé qui est appelé lors du succès de l'authentification via json_login. Il intervient juste après l’authentification réussie, mais avant que la réponse HTTP ne soit renvoyée au client.
    # Personnaliser la réponse HTTP envoyée après le login ou Retourner des informations supplémentaires dans le JSON de réponse, comme un refresh token, firstLoginStep, ou d’autres données.
    App\Security\LoginSuccessHandler:
        arguments:
            $jwtManager: '@lexik_jwt_authentication.jwt_manager'
            $entityManager: '@doctrine.orm.entity_manager'
            $jwtPassphrase: '%env(JWT_PASSPHRASE)%'

    # SERVICES
    App\Service\Auth\ConfirmationTokenService:
        public: true

    App\Service\Auth\MailerService:
        autowire: true
        autoconfigure: true
        arguments:
            $frontendBaseUrl: '%env(FRONT_LOCAL_NETWORK)%'

    App\Service\Auth\ResendConfirmationMailService:
        autowire: true
        autoconfigure: true

    # Rend les contrôleurs publics et ajoute le tag `controller.service_arguments`
    App\Controller\:
        resource: '../src/Controller'
        public: true  # Rend les contrôleurs publics
        tags: ['controller.service_arguments']  # Tag pour injecter les dépendances automatiquement

    App\Controller\Auth\RegisterController:
        public: true
        tags: ['controller.service_arguments']